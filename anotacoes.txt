# Para executar uma bat no Power Shell
$ .\ nome+da+bat

# Visualizar as variáveis de ambiente
$ echo $env:path

# Visualizar o tipo 
$ $env:path.GetType()

# Visualizar os diretórios de saída das variáveis de ambiente 
$env:path.Split(';')

# Visualizar os objetos e listar os tipos de método e propriedade disponíveis
$env:path | Get-Member  

################################################

# Obter os alias do Shell
$ Get-Alias

# Obter os alias do comando dir no Shell
$ Get-Alias -Name dir

################################################

# Obter os comandos no Shell
$ Get-Command

# Buscando comandos com o parâmetro "rename"
$ Get-Command -Name *rename*

# Buscar ajuda para o comando "rename-item"
$ Get-Help -Name rename-item

# Visualizar o que um determinado comando faria se fosse executado
$ rename-item arquivo1.bat arquivo2.bat -WhatIf

# Atualizar base de ajuda do Power Shell
$ Update-Help

# Atribuir alias ao comando rename-item
$ New-Alias rename rename-item

# Verificar o alias do comando rename
$ Get-Alias rename rename

################################################

# Exibe o diretório onde contém os perfis do Power Shell (variável global)
$ $PROFILE

# Criar novo item no perfil do Power Shell
$ new-item $PROFILE
# É exibido o diretório onde foi criado o arquivo

# Podemos ir até a pasta, e veremos que agora existe um novo arquivo lá Microsoft.PowerShell_profile.ps1. 
# Abriremos esse arquivo com o "Bloco de Notas". Executaremos nele os comandos que gostaríamos que estivessem sempre em todas as sessões do PowerShell. 
# No caso, queremos o cmdlet rename-item com um alias para rename. O cmdlet get-childitem com um alias para d. 
# Dentro desse arquivo, digitaremos:

# new-alias rename rename-item
# new-alias d get-childitem

# Podemos até pedir para que ele exiba uma mensagem para nós assim que o PowerShell for aberto.

# new-alias rename rename-item
# new-alias d get-childitem
# echo "Oi, Guilherme"

################################################

# Acabamos de esbarrar em mais um mecanismo de segurança do PowerShell. 
# Esse mecanismo de segurança nos impede de executar scripts do PowerShell pelo PowerShell. 
# Essa restrição é chamada de Política de Execução, ou em inglês Execution Policies.

# Podemos verificar o item de ajuda about_Execution_Policies para obter mais informações sobre isso. 
# No PowerShell, podemos digitar:

$ get-help about_execution_policies

# O que desejamos é alterar de Restricted para outro valor, o Unrestricted. 
# Com ele, podemos executar scripts que não foram assinados por um publicador autorizado, ou dentro de um domínio, sem problema algum.
# Precisamos obter o valor de política de execução, através do comando Get-ExecutionPolicy.

$ Get-ExecutionPolicy 
# Restricted

# Se obtivemos com o Get, para alterar utilizaremos o Set-ExecutionPolicy:
# Set-ExecutionPolicy Unrestricted

# Vamos confirmar! Ops! Ocorreu um outro erro. 
# Quando alteramos a política de execução, alteramos também uma chave de registro do Windows, gerando assim um erro. 
# E para evitar esse erro, é preciso executar o PowerShell como administrador. 
# Então, vamos fechá-lo, e procuraremos novamente pelo PowerShell, porém clicaremos com o botão direito e depois em "Executar como administrador".

# Depois que o PowerShell for aberto como administrador, executaremos o comando Set-ExecutionPolicy unrestricted. 
# Confirmaremos, e pronto! Não tivemos nenhum erro agora. 
# Isso acontece porque estamos executando como administrador. Vamos fechar essa sessão do PowerShell, para tentar executar novamente com o profile que criamos.

# Ao clicar no PowerShell (não precisa ser como Administrador), podemos ver que a mensagem do comando echo foi exibida assim que a aplicação foi aberta

# Maravilha! A mensagem que colocamos no profile, está sendo mostrada para nós. Se tentarmos digitar rename, o alias que criamos no profile deverá ser reconhecido.

# Windows PowerShell

Oi, Guilherme
PS C:\Users\Alura> rename

cmdlet Rename-Item na posição de comando 1 do pipeline
Forneça valores para os seguintes parâmetros:
Path:

# Como podemos ver, o comando foi encontrado, e depois foi pedido os valores. Para cancelar, usamos o atalho "Ctrl + L". 
# Ao utilizarmos o outro alias d que criamos para o comando get-childitem, vemos que ele também está sendo executado com sucesso.

################################################

# Existe bastante conteúdo nativo do PowerShell, como podemos ver na lista que aparecerá. Vamos utilizar o about_Profiles:
$ PS C:\Users\Alura> get-help about_Profiles

# Podemos ver que há muita informação no arquivo de Profiles. Ao acessarmos o conteúdo um pouco mais adiante, veremos alguns diretórios de $Profile:
Name                                Description
--------------                      -------------
$Profile                            Current User, Current Host
$Profile.CurrentUserCurrentHost     Current User, Current Host
$Profile.CurrentUserAllHosts        Current User, All Hosts
$Profile.AllUsersCurrentHost         All Users, Current Host
$Profile.AllUsersAllHosts           All Users, All Hosts

# O que mais se encaixa com a nossa necessidade é o AllUsersCurrentHost (Todos os usuários-Host atual). 
# Mas antes de visitar essa variável e alterar o script dela, precisamos saber o que é a palavra Host. 
# O Host é um hospedeiro do PowerShell, é ele quem hospeda a sessão do PowerShell. 
# É possível ter outros Hosts também, como por exemplo, quando fazemos uma execução remota de scripts, ou quando executamos pelo scheduler do Windows, um script, e assim não aparece a interface gráfica. 
# Ele simplesmente executa um script do PowerShell. Não é por que não temos uma janela, que não temos um hospedeiro. 
# Existe um hospedeiro diferente, e não da interface gráfica.

Isso quer dizer que o Host de AllUsersCurrentHost pode também ter o seu profile! Se queremos alterar para Todos os perfis e todos os Hosts, utilizaremos a última opção. Verificaremos qual endereço é esse:

$ PS C:\Users\Alura> $Profile.AllUsersAllHosts

# Temos esse endereço:
# C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1

# Ao tentarmos acessar esse diretório, vemos que não existe algum arquivo chamado de profile. 
# Então, fecharemos o PowerShell, pois não temos uma sessão de administrador, e vamos iniciá-lo novamente, pois não podemos escrever em um diretório do Windows sem ser administrador.

# Após estar na sessão de administrador, vamos digitar novamente:

# PS C:\WINDOWS\system32> $profile.AllUsersAllHosts

# Depois do "Enter", será devolvido aquele mesmo endereço que nos foi retornado anteriormente. 
# E então, acrescentaremos o comando new-item para escrever um novo arquivo nesse endereço.

# PS C:\WINDOWS\system32> new-item $profile.AllUsersAllHosts

# E o arquivo foi criado!

Mode        LastWriteTime        Length        Name
----        --------------       ------        ----
-a----    19/09/2017  20:58        0        profile.ps1

# Para alterar esse arquivo, será necessário abrir o Bloco de Notas como administrador, e então criaremos um profile para todos os usuários dessa máquina. 
# Digitaremos notepad (comando que faz parte do Path da máquina), e passaremos como argumento, a variável $profile.AllUsersAllHosts, e então será aberto o Bloco de Notas.

new-alias rename Rename-Item
new-alias d Get-ChildItem
echo "Oi, pessoal do PowerShell!"

# Salvaremos esse arquivo, e fecharemos o Bloco de Notas. Fecharemos também o PowerShell para abri-lo novamente. 
# Olhe só! Ocorreu um erro dizendo que o Alias não foi permitido porque já existe um alias com o nome rename. 
# Uma vez criado um alias chamado rename no perfil de todos os usuários, não podemos criar um novo alias com esse mesmo nome. 
# O que devemos fazer é editar o arquivo para tirar a criação desses alias. O que irá restar é somente o echo "Oi, pessoal do PowerShell!". 
# Salvaremos, fecharemos a pasta e o PowerShell.

# Ao abrir novamente o PowerShell, temos a seguinte mensagem:

Oi, pessoal do PowerShell!!!!
Oi, Guilherme
PS C:\Users\Alura>

# A frase Oi, pessoal do PowerShell!!!! foi escrito no profile de todos os hosts. Já a frase Oi, Guilherme, vem do nosso profile, do nosso usuário. 
# No entanto, alteramos esse profile e removemos os comandos de criação de alias. 
# Mas, ao usar o alias d por exemplo, que se refere ao comando de listagem de diretórios, funciona perfeitamente, pois foi criado no perfil de todos os usuários de todos os Hosts.

################################################

# Criar um arquivo com o nome Microsoft.PowerShell_profile.ps1 no diretório C:\Users\SEU_USUARIO\Documents\WindowsPowerShell\ com o conteúdo

New-Alias rename Rename-Item echo "Olá, usuário!"

################################################

# Filtrar arquivos em um diretório por um determinado parâmetro (qualquer arquivo que contenha *_migrando_*)
$ gci -Recurse -File | Select-Object Name | Where-Object { $_ -like "*_migrando_*" }

# Filtrar arquivos em um diretório por um determinado parâmetro exibindo nome e tamanho (qualquer arquivo que contenha *_migrando_*)
$ gci -Recurse -File | Where-Object Name -like "*_migrando_*" | Select-Object Name, Length

Name                                    Length
----                                    -------
DateParts_migrando_Fernanda.bat            649
pipeIf_migrando_Thiago.bat                1207
remCrasher_migrando_Guilherme.bat           27
callcolons_migrando_Marcos.bat             129
defaultJumpDir_migrando_Marcos.bat         682
emptyTokens_migrando_Fernanda.bat          788
fileRedirection_migrando_Marcos.bat        327
fileassembler_migrando_Fernanda.bat        400
fileModifiedTime_migrando_Thiago.bat       947
fileTimes_migrando_Marcos.bat              799
sha1_migrando_Guilherme.bat               1080
sha256_migrando_Guilherme.bat             1096
sha384_migrando_Guilherme.bat             1096
SHA512_migrando_Guilherme.bat             1096
dirTimesNET_migrando_Fernanda.bat         2123
gzipJS_migrando_Marcos.bat                2794
listEncodings_migrando_Ana.bat            1633
selectFolder_migrando_Ana.bat              753

################################################

# Exibir o tamanho do arquivo
$ PS C:\Scripts> "{0:N2}" -f (5445644654 / 1GB)
5,07

# Funcionou! Pois nós deixamos bem claro que queremos o primeiro índice 0 formatado para o "N2". 
# Indicamos o primeiro índice pois nós podemos passar outros valores. Eles são separados por vírgulas.

# Não é necessário fazer um append na string com um "+" para acrescentar o GB, podemos colocá-lo diretamente no formato.

$ PS C:\Scripts> "{0:N2}GB" -f (5445644654 / 1GB)

################################################